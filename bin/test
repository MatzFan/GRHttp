#!/usr/bin/env ruby

require 'pathname'
Root ||= Pathname.new(File.dirname(__FILE__)).expand_path
Dir.chdir Root.join('..').to_s
require "bundler/setup"
require "grhttp"
puts "Using GRHttp #{GRHttp::VERSION} with GReactor #{GReactor::VERSION}"

# ~/ruby/wrk/wrk -c400 -d5 -t12 http://localhost:3000/ctrl
# ab -n 10000 -c 200 -k http://127.0.0.1:3000/
# ab -n 10000 -c 200 -k https://127.0.0.1:3030/

# GR.start; 10_000.times {|i| GR.run_async {GR.run_after(5, GRHttp.ws_connect('ws://localhost:3000') {|ws| } ) {|ws| ws.close; puts "#{i} closed" } ; puts "opening #{i}"} }


module MyServer
    module_function
    def call request, response
      case request.path
      when '/refuse'
        return false
      when '/stream'
        response.stream_enum("Hello Streaming!".chars.each_with_index) do |c, i|
          sleep i/10.0
          response << c
        end
        return true
      when '/request'
        response << (request.to_a.map {|a| a.join ": "} .join "\n")
        return true
      when '/headers'
        response << (request.headers.to_a.map {|a| a.join ": "} .join "\n")
        return true
      end
      # puts "Your last visit here was #{response.session[:last_visit]}" if response.session[:last_visit]
      # response.session[:last_visit] = Time.now
      response << 'Hello my World!'#  request.to_s
      true
    end
    def on_open ws
      puts 'WebSocket Opened!'
      @first ||= ws.uuid
      ws.autopong 40
      ws << "System: Hello!"

      if ws.uuid == @first
        ws << "System: You're chosen as an admin, so you get special notifications :-)"
      else
        ws.unicast @first, "System: Someone just joind the chat"
      end
    end
    def on_message ws
      ws << "You: #{ws.data}"
      ws.broadcast "Someone: #{ws.data}"
    end
    def on_broadcast ws
        ws << ws.data
        true
    end
    def on_close ws
      puts 'WebSocket Closed!'
      ws.unicast @first, "System: Someone just left the chat"
      @first = nil if ws.uuid == @first
    end
end

upgrade_handler = Proc.new {|i, o| MyServer unless i.path == '/refuse'}

# GR::Settings.set_forking 4

# GR.create_logger nil

GRHttp.start(8) do
    GRHttp.listen upgrade_handler: upgrade_handler, http_handler: MyServer
    GRHttp.listen upgrade_handler: upgrade_handler, http_handler: MyServer, port: 3030, ssl: true
end

# GRHttp.start {   GRHttp.listen {|request, response| 'Hello World!' }      }
